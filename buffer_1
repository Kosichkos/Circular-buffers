#include <iostream>

template <typename T>
class CircularBuffer {
private:
    T* buffer;
    size_t head;
    size_t tail;
    size_t maxSize;
    bool full;

public:
    CircularBuffer(size_t size) : maxSize(size), head(0), tail(0), full(false) {
        buffer = new T[maxSize];
    }

    ~CircularBuffer() {
        delete[] buffer;
    }

    void put(T item) {
        buffer[tail] = item;
        tail = (tail + 1) % maxSize;

        if (full) {
            head = (head + 1) % maxSize;
        }

        full = tail == head;
    }

    T get() {
        if (isEmpty()) {
            throw std::runtime_error("Buffer is empty");
        }

        T item = buffer[head];
        head = (head + 1) % maxSize;
        full = false;
        return item;
    }

    bool isEmpty() const {
        return (!full && (head == tail));
    }

    bool isFull() const {
        return full;
    }

    void reset() {
        head = tail;
        full = false;
    }

    size_t size() const {
        if (full) {
            return maxSize;
        }

        if (tail >= head) {
            return tail - head;
        }

        return maxSize + tail - head;
    }
};
